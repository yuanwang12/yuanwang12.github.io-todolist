{"version":3,"sources":["store.js","component/Todolist.js","App.js","serviceWorker.js","index.js"],"names":["initialState","todolist","value","state","isEdit","pending","finished","store","createStore","arguments","length","undefined","action","type","Object","objectSpread","concat","toConsumableArray","payload","slice","map","item","index","Todolist","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handlerDelete","DELETE","count","COMPING","handlerEdit","console","log","EDITABLE","handlerFinished","e","text","myInput","handlerSelect","CHANGE_STATE","pcount","fcount","FINISHED","changeValue","setState","target","classArr","react_default","a","createElement","className","join","defaultValue","onClick","onChange","href","Component","connect","thisProps","dispatch","arg","App","handlerAdd","nativeEvent","keyCode","newTodolist","ADD","document","addEventListener","handleEnterKey","removeEventListener","handleEenterKey","htmlFor","id","name","placeholder","required","autoComplete","onKeyPress","src_component_Todolist","key","Boolean","window","location","hostname","match","ReactDOM","render","es","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.58979c80.chunk.js","sourcesContent":["import { createStore } from 'redux';\r\n\r\n// 初始化store state状态数据\r\nconst initialState = {\r\n    todolist:[\r\n      {value: 'reducer初始值', state: false, isEdit: false}\r\n    ],\r\n    pending: 1, //正在进行\r\n    finished: 0, //已完成\r\n }\r\n\r\n// 定义action类型\r\nconst ADD = \"ADD\";\r\nconst DELETE = \"DELETE\";\r\nconst UPDATE = \"UPDATE\";\r\nconst CHANGE_STATE = \"CHANGE_STATE\";\r\nconst COMPING = \"COMPING\";\r\nconst FINISHED = \"FINISHED\";\r\nconst EDITABLE = \"EDITABLE\";\r\n// 创建reducer函数\r\nconst educationReducer = (state = initialState, action)=> {\r\n    switch(action.type){\r\n        case ADD: {\r\n            return {\r\n                ...state, // 解构下当前state,保持state最新\r\n                todolist: [...state.todolist, ...action.payload]\r\n            }\r\n        }\r\n        case DELETE: {\r\n            return {\r\n                ...state, // 解构下当前state,保持state最新\r\n                todolist: [...state.todolist.slice(0, action.payload), ...state.todolist.slice(action.payload + 1)]\r\n            }\r\n        }\r\n        case UPDATE: {\r\n            return {\r\n                ...state, // 解构下当前state,保持state最新\r\n                todolist: [...action.payload]\r\n            }\r\n        }\r\n        case CHANGE_STATE: {\r\n            return {\r\n                ...state, // 解构下当前state,保持state最新\r\n                todolist: [...state.todolist.map((item, index) => {\r\n                    if(index === action.payload){\r\n                        item.state = !item.state;\r\n                    }\r\n                    return item;\r\n                })]\r\n            }\r\n        }\r\n        case COMPING: {\r\n            return {\r\n                ...state, // 解构下当前state,保持state最新\r\n                pending: action.payload > 0 ? action.payload : 0\r\n            }\r\n        }\r\n        case FINISHED: {\r\n            return {\r\n                ...state, // 解构下当前state,保持state最新\r\n                finished: action.payload > 0 ? action.payload : 0\r\n            }\r\n        }\r\n        case EDITABLE: {\r\n            return {\r\n                ...state, // 解构下当前state,保持state最新\r\n                todolist: [...state.todolist.map((item, index) =>{\r\n                    if(index === action.payload[0]){\r\n                        item.isEdit = action.payload[1];\r\n                        item.value = action.payload[2]\r\n                    }\r\n                    return item;\r\n                })]\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// 基于reducer创建store存储空间 \r\nlet store = createStore(educationReducer);\r\n\r\nexport default store;\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport './Todolist.css';\r\n\r\nclass Todolist extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            text: props.value,\r\n            index: props.index\r\n        };\r\n        this.classArr = [];\r\n    }\r\n    // 删除\r\n    handlerDelete = ()=>{\r\n        this.props.DELETE(this.props.index);\r\n        // 计算进心中的数据\r\n        let count = this.props.pending - 1;\r\n        this.props.COMPING(count);\r\n    }\r\n    // 修改\r\n    handlerEdit = ()=>{\r\n        console.log('修改');\r\n        this.props.EDITABLE([this.props.index, true, this.props.value]);\r\n        console.log(this.props);\r\n    }\r\n    // 完成\r\n    handlerFinished = (e)=>{\r\n        console.log('完成');\r\n        this.props.EDITABLE([this.props.index, false, this.state.text]);\r\n        console.log(this.myInput);\r\n    }\r\n    handlerSelect = (e)=>{\r\n        this.props.CHANGE_STATE(this.props.index);\r\n        if(this.props.todolist[this.props.index].state){\r\n            // this.classArr.push(finishedbg);\r\n             // 计算进心中的数据\r\n            let pcount = this.props.pending - 1;\r\n            this.props.COMPING(pcount);\r\n            // 计算已完成的数据\r\n            let fcount = this.props.finished + 1;\r\n            this.props.FINISHED(fcount);\r\n        }else{\r\n             // 计算进心中的数据\r\n             let pcount = this.props.pending + 1;\r\n             this.props.COMPING(pcount);\r\n             // 计算已完成的数据\r\n             let fcount = this.props.finished - 1;\r\n             this.props.FINISHED(fcount);\r\n        }\r\n    }\r\n    changeValue = (e)=>{\r\n        this.setState({\r\n            text: e.target.value\r\n        })\r\n    }\r\n    render() {\r\n        console.log(this.props.value)\r\n        return (\r\n            <div>\r\n                <ol>\r\n                    <input type=\"checkbox\" className={this.classArr.join(\" \")} defaultValue={this.props.value} onClick={this.handlerSelect}/>\r\n                    {\r\n                        this.props.todolist[this.state.index].isEdit === true ? <input type=\"text\" value={this.state.text} onChange={this.changeValue}/> : <span>{this.state.text}</span>\r\n                    }\r\n                    \r\n                    <a href=\"##\" onClick={this.handlerDelete}>删除</a>\r\n                    {\r\n                        this.props.todolist[this.state.index].isEdit === true ? \r\n                        <a href=\"##\" onClick={this.handlerFinished}>完成</a> : <a href=\"##\" onClick={this.handlerEdit}>修改</a>\r\n                    }\r\n                </ol>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (store, thisProps)=>{\r\n    return {\r\n        todolist: store.todolist,\r\n        pending: store.pending,\r\n        finished: store.finished\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch, thisProps)=>{\r\n    return {\r\n        DELETE: (arg)=> dispatch({type: 'DELETE', payload: arg}),\r\n        CHANGE_STATE: arg=> dispatch({type: 'CHANGE_STATE', payload: arg}),\r\n        COMPING: arg=> dispatch({type: 'COMPING', payload: arg}),\r\n        FINISHED: arg=> dispatch({type: 'FINISHED', payload: arg}),\r\n        EDITABLE: arg=> dispatch({type: 'EDITABLE', payload: arg}),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Todolist);","import React,{ Component } from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport Todolist from './component/Todolist';\n\nclass App extends Component {\n  constructor(props){\n    super();\n    this.state = {};\n  }\n\n  componentDidMount(){ \n    //组件挂载时候，注册keypress事件\n    document.addEventListener('keypress',this.handleEnterKey)\n  }\n  componentWillUmount(){\n    //组件卸载时候，注销keypress事件\n    document.removeEventListener(\"keypress\",this.handleEenterKey)\n  }\n\n  handlerAdd=(e)=>{\n    if(e.nativeEvent.keyCode === 13){ //e.nativeEvent获取原生的事件对像\n      let newTodolist = [{value: e.target.value, state: false}];\n      this.props.ADD(newTodolist);\n      // 计算进心中的数据\n      let count = this.props.pending + 1;\n      this.props.COMPING(count);\n    }\n    console.log(this.props)\n  }\n  render() {\n    return (\n      <div>\n        <div className=\"App\">\n          <header className=\"header\">\n            <label htmlFor=\"title\">ToDoList</label>\n            <input type=\"text\" id=\"title\" name=\"title\" placeholder=\"添加ToDo\" required=\"required\" autoComplete=\"off\" onKeyPress={this.handlerAdd}></input>\n          </header>\n\n          <section className=\"todolistContent\">\n            <h2>\n              正在进行\n              <span className=\"pending\">{`(${this.props.pending})`}</span>\n            </h2>\n            {\n              this.props.todolist.map((item, index)=>{\n                return <Todolist key={index} index={index} value={item.value} state={item.state} isEdit={item.isEdit}/>\n              })\n            }\n            <h2>\n              已经完成\n              <span className=\"finished\">{`(${this.props.finished})`}</span>\n            </h2>\n          </section>\n        </div>\n      </div>\n    )\n  }\n}\n\nlet mapStateToProps = (store, thisProps)=>{\n  return {\n      todolist: store.todolist,\n      pending: store.pending,\n      finished: store.finished\n  }\n}\nlet mapDispatchToProps = (dispatch, thisProps)=>{\n  return {\n      ADD: (arg)=> dispatch({type: 'ADD', payload: arg}),\n      COMPING: arg=> dispatch({type: 'COMPING', payload: arg})\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux'\nimport store from './store'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Provider store={ store }><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}